/* DO NOT EDIT THIS FILE - it is machine generated */ #include <jni.h>

/* Header for class de_kherud_llama_LlamaModel */

#ifndef _Included_de_kherud_llama_LlamaModel
#define _Included_de_kherud_llama_LlamaModel
#ifdef __cplusplus
extern "C" {
  #endif
  // Core Functions

/**
 * Load a llama.cpp model with the given parameters.
 */
JNIEXPORT void JNICALL Java_de_kherud_llama_LlamaModel_loadModel(JNIEnv* env, jobject obj, jobjectArray jparams);

/**
 * Clean up resources and delete the model.
 */
JNIEXPORT void JNICALL Java_de_kherud_llama_LlamaModel_delete(JNIEnv* env, jobject obj);

/**
 * Set a logger for llama.cpp logs.
 */
JNIEXPORT void JNICALL Java_de_kherud_llama_LlamaModel_setLogger(JNIEnv* env, jclass clazz, jobject log_format, jobject jcallback);

// Server Information Endpoints

/**
 * Get server health status.
 */
JNIEXPORT jstring JNICALL Java_de_kherud_llama_LlamaModel_getHealth(JNIEnv* env, jobject obj);

/**
 * Get detailed server metrics.
 */
JNIEXPORT jstring JNICALL Java_de_kherud_llama_LlamaModel_getMetrics(JNIEnv* env, jobject obj);

/**
 * Get model properties.
 */
JNIEXPORT jstring JNICALL Java_de_kherud_llama_LlamaModel_getProps(JNIEnv* env, jobject obj);

/**
 * Update model properties.
 */
JNIEXPORT void JNICALL Java_de_kherud_llama_LlamaModel_updateProps(JNIEnv* env, jobject obj, jstring jprops);

/**
 * Get list of available models.
 */
JNIEXPORT jstring JNICALL Java_de_kherud_llama_LlamaModel_getModels(JNIEnv* env, jobject obj);

/**
 * Get current server state.
 */
JNIEXPORT jstring JNICALL Java_de_kherud_llama_LlamaModel_getServerState(JNIEnv* env, jobject obj);

// Text Generation Endpoints

/**
 * Handle standard completions request.
 */
JNIEXPORT jstring JNICALL Java_de_kherud_llama_LlamaModel_handleCompletions(JNIEnv* env, jobject obj, jstring jrequestData, jboolean jstream);

/**
 * Handle OpenAI compatible completions request.
 */
JNIEXPORT jstring JNICALL Java_de_kherud_llama_LlamaModel_handleCompletionsOai(JNIEnv* env, jobject obj, jstring jrequestData, jboolean jstream);

/**
 * Handle chat completions request.
 */
JNIEXPORT jstring JNICALL Java_de_kherud_llama_LlamaModel_handleChatCompletions(JNIEnv* env, jobject obj, jstring jrequestData, jboolean jstream);

/**
 * Handle text infill request.
 */
JNIEXPORT jstring JNICALL Java_de_kherud_llama_LlamaModel_handleInfill(JNIEnv* env, jobject obj, jstring jrequestData, jboolean jstream);

/**
 * Get next streaming result chunk.
 */
JNIEXPORT jstring JNICALL Java_de_kherud_llama_LlamaModel_getNextStreamResult(JNIEnv* env, jobject obj, jint taskId);

/**
 * Release task resources.
 */
JNIEXPORT void JNICALL Java_de_kherud_llama_LlamaModel_releaseTask(JNIEnv* env, jobject obj, jint taskId);

/**
 * Cancel ongoing completion.
 */
JNIEXPORT void JNICALL Java_de_kherud_llama_LlamaModel_cancelCompletion(JNIEnv* env, jobject obj, jint taskId);

// Embeddings and Reranking Endpoints

/**
 * Handle embeddings request.
 */
JNIEXPORT jstring JNICALL Java_de_kherud_llama_LlamaModel_handleEmbeddings(JNIEnv* env, jobject obj, jstring jrequestData, jboolean joaiCompat);

/**
 * Handle reranking request.
 */
JNIEXPORT jstring JNICALL Java_de_kherud_llama_LlamaModel_handleRerank(JNIEnv* env, jobject obj, jstring jrequestData);

// Tokenization Endpoints

/**
 * Handle tokenization request.
 */
JNIEXPORT jstring JNICALL Java_de_kherud_llama_LlamaModel_handleTokenize(JNIEnv* env, jobject obj, jstring jcontent, jboolean jaddSpecial, jboolean jwithPieces);

/**
 * Handle detokenization request.
 */
JNIEXPORT jstring JNICALL Java_de_kherud_llama_LlamaModel_handleDetokenize(JNIEnv* env, jobject obj, jintArray jtokens);

/**
 * Apply chat template to messages.
 */
JNIEXPORT jstring JNICALL Java_de_kherud_llama_LlamaModel_applyTemplate(JNIEnv* env, jobject obj, jstring jparams);

// LoRA Adapters Endpoints

/**
 * Get list of available LoRA adapters.
 */
JNIEXPORT jstring JNICALL Java_de_kherud_llama_LlamaModel_getLoraAdapters(JNIEnv* env, jobject obj);

/**
 * Apply LoRA adapters to model.
 */
JNIEXPORT jboolean JNICALL Java_de_kherud_llama_LlamaModel_applyLoraAdapters(JNIEnv* env, jobject obj, jstring jadapters);

// Slots Management Endpoints
/**
 * Handle slot management operations.
 * Consolidates GET /slots and POST /slots/:id_slot endpoints.
 */
JNIEXPORT jstring JNICALL Java_de_kherud_llama_LlamaModel_handleSlotAction(JNIEnv* env, jobject obj, jint action, jint slotId, jstring jfilename);


// Utility Methods

/**
 * Convert JSON schema to grammar.
 */
JNIEXPORT jbyteArray JNICALL Java_de_kherud_llama_LlamaModel_jsonSchemaToGrammarBytes(JNIEnv* env, jclass clazz, jstring j_schema);

JNIEXPORT jintArray JNICALL Java_de_kherud_llama_LlamaModel_encode(JNIEnv * , jobject, jstring);

/**
 * Manage KV cache operations for a specific slot.
 * Consolidated function for KV cache info, clear, save, and load.
 */
JNIEXPORT jstring JNICALL Java_de_kherud_llama_LlamaModel_handleKVCacheAction(JNIEnv* env, jobject obj, jint action, jint slotId, jstring jfilename);

JNIEXPORT jboolean JNICALL Java_de_kherud_llama_LlamaModel_configureParallelInference(JNIEnv* , jobject , jstring );

  #ifdef __cplusplus
}
#endif
#endif