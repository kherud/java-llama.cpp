# This work flow runs all Java tests for continuous integration.
# Since it has to build llama.cpp first, for speed, it only runs / tests on the natively supported GitHub runners.

name: Continuous Integration
on: [ "pull_request", "workflow_dispatch" ]
env:
  MODEL_URL: "https://huggingface.co/afrideva/Llama-160M-Chat-v1-GGUF/resolve/main/llama-160m-chat-v1.q2_k.gguf"
  MODEL_NAME: "llama-160m-chat-v1.q2_k.gguf"
jobs:

  # don't split build and test jobs to keep the workflow simple
  build-and-test-linux:
    name: ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'
      - name: Download model
        run: curl -L ${MODEL_URL} --create-dirs -o models/${MODEL_NAME}
      - name: Build libraries
        # cmake should figure out OS and ARCH automatically when running build.sh (but we need mvn compile for it)
        run: |
          mvn compile
          .github/build.sh
      - name: Run tests
        run: mvn test

  build-and-test-macos:
    name: macos-latest
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'
      - name: Download model
        run: curl -L ${MODEL_URL} --create-dirs -o models/${MODEL_NAME}
      - name: Build libraries
        run: |
          mvn compile
          .github/build.sh
      - name: Run tests
        run: mvn test

  build-and-test-windows:
    name: windows-latest
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'
      - name: Download model
        run: curl -L $env:MODEL_URL --create-dirs -o models/$env:MODEL_NAME
      - name: Build libraries
        run: |
          mvn compile
          .github\build.bat
      - name: Run tests
        run: mvn test
