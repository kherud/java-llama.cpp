# This work flow runs all Java tests for continuous integration.
# Since it has to build llama.cpp first, for speed, it only runs / tests on the natively supported GitHub runners.

name: Continuous Integration
on: [ "pull_request", "workflow_dispatch" ]
env:
  CURL_RELEASE: 'curl-8_7_1'
jobs:

  # don't split build and test jobs to keep the workflow simple
  build-and-test-linux:
    name: ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'
      - name: Build libraries
        # cmake should figure out OS and ARCH automatically when running build.sh (but we need mvn compile for it)
        run: |
          mvn compile
          .github/build.sh -DLLAMA_CURL=ON
      - name: Run tests
        run: mvn test

  build-and-test-macos:
    name: macos-latest
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'
      - name: Build libraries
        run: |
          mvn compile
          .github/build.sh -DLLAMA_CURL=ON -DLLAMA_METAL_EMBED_LIBRARY=ON
      - name: Run tests
        run: mvn test

  build-and-test-windows:
    name: windows-latest
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/checkout@v4
        with:
          repository: 'curl/curl'
          ref: ${{ env.CURL_RELEASE }}
          path: 'curl'
      - name: Build curl
        run: cd curl && ..\.github\build.bat
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'
      - name: Build libraries
        run: |
          mvn compile && 
          .github\build.bat ^
            -DLLAMA_CURL=ON ^
            -DCURL_LIBRARY=curl\build\lib\Release\libcurl.dll ^
            -DCURL_INCLUDE_DIR=curl\include
      - name: Run tests
        run: mvn test
