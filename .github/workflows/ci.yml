# This work flow runs all Java tests for continuous integration.
# Since it has to build llama.cpp first, for speed, it only runs / tests on the natively supported GitHub runners.

name: Continuous Integration
on: [ "pull_request", "workflow_dispatch" ]
jobs:

  # don't split build and test jobs to keep the workflow simple
  build-and-test-linux:
    name: ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'
      - name: Install libcurl
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev
      - name: Build libraries
        shell: bash
        # cmake should figure out OS and ARCH automatically when running build.sh (but we need mvn compile for it)
        run: |
          mvn compile
          .github/build.sh -DLLAMA_CURL=ON
      - name: Run tests
        shell: bash
        run: mvn verify

  build-and-test-macos:
    name: macos-latest
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'
      - name: Install libcurl
        run: |
          brew install curl
      - name: Build libraries
        shell: bash
        run: |
          mvn compile
          .github/build.sh -DLLAMA_CURL=ON -DLLAMA_METAL_EMBED_LIBRARY=ON
      - name: Run tests
        shell: bash
        run: mvn verify

  build-and-test-windows:
    name: windows-latest
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'
      - name: Install libcurl
        run: |
          choco install curl
      - name: Build libraries
        shell: cmd
        run: |
          mvn compile
          .github\build.bat -DLLAMA_CURL=ON
      - name: Run tests
        shell: cmd
        run: mvn verify
